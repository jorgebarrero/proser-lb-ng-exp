/*
* OPERATIVO DETALLADO
*
*/

const myPool = require('../../connections/pool');

const _ = require('lodash');


const poolDat = myPool.poolDat;
const poolCdr = myPool.poolCdr;
const poolQue = myPool.poolQue;
const poolCall = myPool.poolCall;

// const { poolDat, poolCdr, poolQue, poolCall } = require('./../connections/pool');

// Dependencias
const express = require('express');
const router = express.Router();
const bodyParser = require('body-parser');

router.use(bodyParser.json());


/*
* OPERATIVO DETALLADO
* Report
*/


/************************************************************************************** */
// READ REPORT VARIABLES FOR INDIVIDUAL DATE
router.post('/list', async (req, res, next) => {


let result_cdr;
let result_audit;
let result_audit_auxiliares;
let result_audit_asignaciones;
let result_final;
let result_join;
let result_calc;

// Preparation
let values = req.body;

  let tabla_cdr = values.tabla_cdr;
  let tabla_audit = values.tabla_audit;
  let tabla_personas = values.tabla_personas;
  let tabla_agentes = values.tabla_agentes;
  let tabla_colas = values.tabla_colas;

  let filtro_fecha_inicio = values.filtro_fecha_inicio;
  let filtro_fecha_final = values.filtro_fecha_final;

  let filtro_llamada_clasificacion = values.filtro_llamada_clasificacion;
  let filtro_hora_inicio = values.filtro_hora_inicio;
  let filtro_hora_final = values.filtro_hora_final;

  let filtro_minutos_intervalo = values.filtro_minutos_intervalo;
  let filtro_ultimos_minutos = values.filtro_ultimos_minutos;

  let filtro_sql = values.filtro_sql;
  let filtro_sql_like = values.filtro_sql_like;

  let filtro_limit = values.filtro_limit;
  let filtro_order = values.filtro_order;
  let filtro_group = values.filtro_group;
  let filtro_group_compuesto = values.filtro_group_compuesto;

  let filtro_otro = values.filtro_otro;


    let querySQL_cdr =
      `
      SELECT

      COUNT(id_global) as registros,
      MIN(fecha) AS fecha_inicio,
      MAX(fecha) AS fecha_final,

      id_inv_clientes,
      nombre_clientes,

      id_inv_colas,
      nombre_colas,

      id_inv_servicios,
      nombre_servicios,

      id_inv_campanas,
      nombre_campanas,


      id_inv_supervisores,
      nombre_supervisores AS supervisor,

      id_inv_suplentes,
      nombre_suplentes,

      id_inv_agentes as id_inv_agentes,
      nombre_agentes,
      doc_ident_agentes,
      doc_complementario_agentes,

      id_inv_horarios,
      nombre_horarios,

      SUM( tiempo_after_call ) AS seg_after_call,
      SEC_TO_TIME( tiempo_after_call ) AS t_after_call,


      SUM(llamadas_recibidas) AS llamadas_recibidas,
      SUM( IF( llamadas_recibidas = 1, duration, 0 ) ) AS seg_recibidas,
      SEC_TO_TIME(SUM( IF( llamadas_recibidas = 1, duration, 0 ) )) AS t_recibidas,
      TIME_FORMAT(SEC_TO_TIME(
        (SUM( IF( llamadas_recibidas = 1, duration, 0 )) /
        SUM(llamadas_recibidas))),
      ('%H:%i:%s')) as t_promedio_recibidas,

      SUM( colgado_agente ) as colgado_agente,


      SUM(llamadas_realizadas) AS llamadas_realizadas,
      SUM( IF( llamadas_realizadas = 1, duration, 0 ))  AS seg_realizadas,
      SEC_TO_TIME(SUM( IF( llamadas_realizadas = 1, duration, 0 ) )) AS t_realizadas,
      TIME_FORMAT(SEC_TO_TIME(
        (SUM( IF( llamadas_realizadas = 1, duration, 0 )) /
        SUM(llamadas_realizadas) )),
      ('%H:%i:%s')) AS t_promedio_realizadas,

      SUM( llamada_interna ) as llamada_interna,

      SUM( IF( llamada_interna = 1, duration, 0 ) ) AS t_internas,

      id_global

      FROM
        ${tabla_cdr}

      WHERE
      id_inv_agentes > 0

      ${filtro_fecha_inicio}
      ${filtro_fecha_final}

      ${filtro_hora_inicio}
      ${filtro_hora_final}

      ${filtro_llamada_clasificacion}

      ${filtro_sql}
      ${filtro_otro}

        GROUP by id_inv_agentes
      ${filtro_limit}

      `;

      //      ${filtro_group}
// Data base access
  try {
        var result = await poolDat.query(querySQL_cdr);
        result_cdr = result
        // res.send(JSON.stringify(result));
         console.log(querySQL_cdr);

      }
  catch(err) {
    console.log('Server error querySQL_cdr');
      console.log(querySQL_cdr);
    res.status(500).send('Server error querySQL_cdr');
    // throw new Error(err)
  }


  /*********** */


  let querySQL_audit_auxiliares =
  `
  SELECT

    MIN(fecha) AS fecha_inicio,
    MAX(fecha) AS fecha_final,

    nombre_supervisores AS supervisor,
    id_inv_agentes as id_inv_agentes,

    nombre_agentes AS agente,

    id_inv_auxiliares,
    nombre_auxiliares,

    SUM(tiempo_auxiliares) AS seg_auxiliares,
    SEC_TO_TIME ( SUM(tiempo_auxiliares) ) AS t_auxiliares,


    id_global

  FROM
    ${tabla_audit}

  WHERE
  id_inv_agentes > 0 AND 	id_inv_auxiliares <> 0  AND productividad = 0
  ${filtro_fecha_inicio}
  ${filtro_fecha_final}

  ${filtro_sql_like}

  ${filtro_otro}

  GROUP by id_inv_agentes, nombre_auxiliares

  ${filtro_limit}

  `;


// Data base access
try {
  var result = await poolDat.query(querySQL_audit_auxiliares);
  result_audit_auxiliares = result
  // res.send(JSON.stringify(result));
   console.log(querySQL_audit_auxiliares);

  }
catch(err) {
console.log('Server error querySQL_audit_auxiliares');
  console.log(querySQL_audit_auxiliares);
  // res.status(500).send('Server error');
  res.status(500).send(JSON.stringify(err));
// throw new Error(err)
}


/******************************************************************* */

/*********** */


let querySQL_audit_asignaciones =
`
SELECT

  MIN(fecha) AS fecha_inicio,
  MAX(fecha) AS fecha_final,

  nombre_supervisores AS supervisor,
  id_inv_agentes as id_inv_agentes,

  nombre_agentes AS agente,

  id_inv_auxiliares,
  nombre_auxiliares,

  SUM(tiempo_auxiliares) AS seg_auxiliares,
  SEC_TO_TIME ( SUM(tiempo_auxiliares) ) AS t_auxiliares,


  id_global

FROM
  ${tabla_audit}

WHERE
id_inv_agentes > 0 AND 	id_inv_auxiliares <> 0  AND productividad = 1
${filtro_fecha_inicio}
${filtro_fecha_final}

${filtro_sql_like}

${filtro_otro}

GROUP by id_inv_agentes, nombre_auxiliares

${filtro_limit}

`;


// Data base access
try {
var result = await poolDat.query(querySQL_audit_asignaciones);
result_audit_asignaciones = result
// res.send(JSON.stringify(result));
 console.log(querySQL_audit_asignaciones);

}
catch(err) {
console.log('Server error querySQL_audit_asignaciones');
console.log(querySQL_audit_asignaciones);
// res.status(500).send('Server error');
res.status(500).send(JSON.stringify(err));
// throw new Error(err)
}


/******************************************************************* */
  let querySQL_audit =
  `
  SELECT

    MIN(fecha) AS fecha_inicio,
    MAX(fecha) AS fecha_final,

    nombre_supervisores AS supervisor,
    id_inv_agentes as id_inv_agentes,

    nombre_agentes AS agente,

    SUM(tiempo_connections) AS seg_conectado,
    SEC_TO_TIME ( SUM(tiempo_connections)) AS t_conectado,

    SUM(tiempo_auxiliares) AS seg_auxiliares,
    SEC_TO_TIME ( SUM(tiempo_auxiliares) ) AS t_auxiliares,

    SUM(tiempo_asignaciones) AS seg_asignaciones,
    SEC_TO_TIME ( SUM(tiempo_asignaciones) ) AS t_asignaciones,


    id_global

  FROM
    ${tabla_audit}

  WHERE
  id_inv_agentes > 0
  ${filtro_fecha_inicio}
  ${filtro_fecha_final}

  ${filtro_sql_like}

  ${filtro_otro}

  GROUP by id_inv_agentes
  ${filtro_limit}


  `;


// Data base access
try {
    var result = await poolDat.query(querySQL_audit);
    result_audit = result

    result_join = result_cdr
    .map( x => {
      return {
        cdr: x,
        audit: match( x.id_inv_agentes, result_audit),
        audit_auxiliares: match_all( x.id_inv_agentes, result_audit_auxiliares),
        audit_asignaciones: match_all (x.id_inv_agentes, result_audit_asignaciones)
      }
    })


    result_calc = result_join
    .map( x => {
      return  {
        cdr: x.cdr,
        audit: x.audit,
        audit_auxiliares: x.audit_auxiliares,
        audit_asignaciones: x.audit_asignaciones,
        calc: calculate( x.cdr, x.audit)
      }
    })


     console.log(querySQL_audit);

  }
catch(err) {
console.log('Server error querySQL_audit');
  console.log(querySQL_audit);
  // res.status(500).send('Server error');
  res.status(500).send(JSON.stringify(err));
// throw new Error(err)
}


/******************************************************************* */

result_final = {
  result_cdr,
  result_audit
}


function match( id_inv_agentes, audit){
  let newResult = {};

  if (id_inv_agentes && audit ) {
    let temp = audit
    .filter( x => {
      return x.id_inv_agentes === id_inv_agentes;
    })

    newResult = temp[0];
  }
  return newResult;
}


function match_all( id_inv_agentes, audit){
  let newResult = {};

  if (id_inv_agentes && audit ) {
    let temp = audit
    .filter( x => {
      return x.id_inv_agentes === id_inv_agentes;
    })

    newResult = temp;
  }
  return newResult;
}



function calculate (cdr, audit) {

  let result = { seg_ocupado: null, seg_disponible: null, t_ocupado: null, t_disponible: null }

if( cdr && audit ) {

    let llamadas_recibidas = cdr.llamadas_recibidas;
    let llamadas_realizadas = cdr.llamadas_realizadas;

    let tiempo_conectado = audit.t_conectado;

    let tiempo_recibidas = cdr.t_recibidas;
    let tiempo_realizadas = cdr.t_realizadas;

    let tiempo_after_call = cdr.t_after_call;

    let tiempo_asignaciones = audit.t_asignaciones;

    let tiempo_auxiliares = audit.t_auxiliares;



    let seg_ocupado =
    cdr.seg_recibidas +
    cdr.seg_realizadas +
    cdr.seg_after_call +
    audit.seg_asignaciones +
    audit.seg_auxiliares
    ;

    let seg_productivos =
    cdr.seg_recibidas +
    cdr.seg_realizadas +
    cdr.seg_after_call +
    audit.seg_asignaciones
    ;

    let seg_conversacion =
    cdr.seg_recibidas +
    cdr.seg_realizadas
    ;



    let seg_auxiliares = audit.seg_auxiliares;

    let seg_disponible = audit.seg_conectado - seg_ocupado;

    let tiempo_ocupado = secToTime(seg_ocupado);
    let tiempo_productivo = secToTime(seg_productivos);
    let tiempo_disponible = secToTime(seg_disponible);
    let tiempo_conversacion = secToTime(seg_conversacion);



    let porc_ocupacion = '';
    if ( audit.seg_conectado ) {
      porc_ocupacion = parseFloat( (seg_ocupado / audit.seg_conectado) * 100 ).toFixed(2);
    }



    let porc_produccion = '';
    if ( audit.seg_conectado ) {
      porc_produccion = parseFloat( (seg_productivos / audit.seg_conectado) * 100 ).toFixed(2);
    }

    let porc_auxiliar = '';
    if ( audit.seg_conectado ) {
      porc_auxiliar = parseFloat( (seg_auxiliares / audit.seg_conectado) * 100 ).toFixed(2);
    }

    let porc_disponible = '';
    if ( audit.seg_conectado ) {
      porc_disponible = parseFloat( (seg_disponible / audit.seg_conectado) * 100 ).toFixed(2);
    }

    let porc_conversacion = '';
    if ( audit.seg_conectado ) {
      porc_disponible = parseFloat( (seg_conversacion / audit.seg_conectado) * 100 ).toFixed(2);
    }




    result = {
      llamadas_recibidas,
      llamadas_realizadas,

      tiempo_conectado,

      tiempo_recibidas,
      tiempo_realizadas,
      tiempo_conversacion,

      tiempo_asignaciones,
      tiempo_auxiliares,
      tiempo_after_call,

      tiempo_ocupado,
      tiempo_productivo,
      tiempo_disponible,


      porc_ocupacion,

      porc_produccion,
      porc_auxiliar,
      porc_disponible,
      porc_conversacion,

     }
  }

  return result
}


function secToTime( sec ) {

  result = '';

  if (sec) {
  var sec_num = parseInt(sec, 10); // don't forget the second param
  var hours   = Math.floor(sec_num / 3600);
  var minutes = Math.floor((sec_num - (hours * 3600)) / 60);
  var seconds = sec_num - (hours * 3600) - (minutes * 60);

  if (hours   < 10) {hours   = "0"+hours;}
  if (minutes < 10) {minutes = "0"+minutes;}
  if (seconds < 10) {seconds = "0"+seconds;}
  var time =  hours+':'+minutes+':'+seconds;

  result = time

}
  return result

}


res.send(JSON.stringify(result_calc));


});


module.exports = router
